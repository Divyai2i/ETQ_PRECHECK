MMP382_MSSQL_Database_Check

tc01_IsDatabaseMetaInformationIncludesAllDetails()
metaData = select d.schema_name, COUNT(distinct(d.t_object_id)) as table_count, COUNT((d.col_id)) as column_count , COUNT(distinct(d.v_object_id)) as view_count ,(select COUNT(*) as count from (select obj.schema_id, schema_name(obj.schema_id) as schema_name, obj.name as function_name, case type when 'FN' then 'SQL scalar function' when 'TF' then 'SQL inline table-valued function' when 'IF' then 'SQL table-valued-function' end as type, substring(par.parameters, 0, len(par.parameters)) as parameters, TYPE_NAME(ret.user_type_id) as return_type, mod.definition from sys.objects obj join sys.sql_modules mod on mod.object_id = obj.object_id cross apply(select p.name + ' ' + TYPE_NAME(p.user_type_id) + ', ' from sys.parameters p where p.object_id = obj.object_id and p.parameter_id != 0 for xml path ('')) par (parameters) left join sys.parameters ret on obj.object_id = ret.object_id and ret.parameter_id = 0 where obj.type in ('FN', 'TF', 'IF') and obj.schema_id = 1) as f ) as function_count ,(select COUNT(*) as count from ( select obj.schema_id, schema_name(obj.schema_id) as schema_name, obj.name as procedure_name, case type when 'P' then 'SQL Stored Procedure' when 'X' then 'Extended stored procedure' end as type, substring(par.parameters, 0, len(par.parameters)) as parameters, mod.definition from sys.objects obj join sys.sql_modules mod on mod.object_id = obj.object_id cross apply(select p.name + ' ' + TYPE_NAME(p.user_type_id) + ', ' from sys.parameters p where p.object_id = obj.object_id and p.parameter_id != 0 for xml path ('')) par (parameters) where obj.type in ('P', 'X') and obj.schema_id = d.schema_id) as sp) as sp_count ,(select COUNT(*) as count from ( select tab.schema_id, schema_name(tab.schema_id) + '.' + tab.name as [table], trig.name as trigger_name, case when is_instead_of_trigger = 1 then 'Instead of' else 'After' end as [activation],(case when objectproperty(trig.object_id, 'ExecIsUpdateTrigger') = 1 then 'Update ' else '' end + case when objectproperty(trig.object_id, 'ExecIsDeleteTrigger') = 1 then 'Delete ' else '' end + case when objectproperty(trig.object_id, 'ExecIsInsertTrigger') = 1 then 'Insert ' else '' end) as [event], case when trig.[type] = 'TA' then 'Assembly (CLR) trigger' when trig.[type] = 'TR' then 'SQL trigger' else '' end as [type], case when is_disabled = 1 then 'Disabled' else 'Active' end as [status], object_definition(trig.object_id) as [definition] from sys.triggers trig inner join sys.objects tab on trig.parent_id = tab.object_id where tab.schema_id = d.schema_id) as trg) as trigger_count ,(select sum(rc.row_count) as row_count from (SELECT sOBJ.schema_id, QUOTENAME(SCHEMA_NAME(sOBJ.schema_id)) + '.' + QUOTENAME(sOBJ.name) AS [TableName] , SUM(sPTN.Rows) AS row_count FROM sys.objects AS sOBJ INNER JOIN sys.partitions AS sPTN ON sOBJ.object_id = sPTN.object_id WHERE sOBJ.type = 'U' AND sOBJ.is_ms_shipped = 0x0 AND index_id < 2 and sOBJ.schema_id = d.schema_id GROUP BY sOBJ.schema_id, sOBJ.name ) as rc) as record_count, (select max_index from (select i1.schema_id, i1.schema_name, max(index_count) as max_index from (select i.schema_id, i.schema_name, i.table_view, count(*) as index_count from( select t.schema_id, schema_name(t.schema_id) as schema_name, t.name as table_view, case when t.[type] = 'U' then 'Table' when t.[type] = 'V' then 'View' end as [object_type], i.index_id, case when i.is_primary_key = 1 then 'Primary key' when i.is_unique = 1 then 'Unique' else 'Not unique' end as [type], i.[name] as index_name, substring(column_names, 1, len(column_names)-1) as [columns], case when i.[type] = 1 then 'Clustered index' when i.[type] = 2 then 'Nonclustered unique index' when i.[type] = 3 then 'XML index' when i.[type] = 4 then 'Spatial index' when i.[type] = 5 then 'Clustered columnstore index' when i.[type] = 6 then 'Nonclustered columnstore index' when i.[type] = 7 then 'Nonclustered hash index' end as index_type from sys.objects t inner join sys.indexes i on t.object_id = i.object_id cross apply (select col.[name] + ', ' from sys.index_columns ic inner join sys.columns col on ic.object_id = col.object_id and ic.column_id = col.column_id where ic.object_id = t.object_id and ic.index_id = i.index_id order by col.column_id for xml path ('')) D (column_names) where t.is_ms_shipped <> 1 and index_id > 0 ) as i GROUP BY i.schema_id, i.schema_name, i.table_view) as i1 where i1.schema_id = d.schema_id GROUP BY i1.schema_id, i1.schema_name) as indx) as max_index from ( select s.schema_id, s.name as schema_name, t.object_id as t_object_id, t.name as table_name, col.column_id as col_id, col.name as col_name, dt.name as data_type, col.max_length, col.precision, col.is_nullable, v.name as view_name, v.object_id as v_object_id from sys.schemas as s left join sys.tables as t on t.schema_id = s.schema_id left join sys.columns as col on t.object_id = col.object_id left join sys.types as dt on col.user_type_id = dt.user_type_id left join sys.views as v on v.schema_id = s.schema_id where s.name not in ('dbo', 'db_owner', 'db_accessadmin', 'db_securityadmin', 'db_ddladmin', 'db_backupoperator', 'db_datareader', 'db_datawriter', 'db_denydatareader', 'db_denydatawriter', 'sys', 'INFORMATION_SCHEMA', 'guest')) as d GROUP BY d.schema_id, d.schema_name ORDER BY COUNT(distinct(d.t_object_id))

tc02_IsMssqlDataTypesFetchedAreSupportedOrUnsupportedForMysql()
dataTypes = select distinct(c.data_type) as data_type from( select s.schema_id, s.name, t.object_id as t_object_id, t.name as table_name, col.column_id as col_id, col.name as col_name, dt.name as data_type, col.max_length, col.precision, col.is_nullable from sys.schemas as s inner join sys.tables as t on t.schema_id = s.schema_id inner join sys.columns as col on t.object_id = col.object_id left join sys.types as dt on col.user_type_id = dt.user_type_id UNION ALL select s.schema_id, s.name, t.object_id as t_object_id, t.name as table_name, col.column_id as col_id, col.name as col_name, dt.name as data_type, col.max_length, col.precision, col.is_nullable from sys.schemas as s inner join sys.views as t on t.schema_id = s.schema_id inner join sys.columns as col on t.object_id = col.object_id left join sys.types as dt on col.user_type_id = dt.user_type_id) as c

tc03_IsIndexesCreatedInMssqlIsLessThan64()
tc04_IsIndexCountGreaterThan64()
indexCount = select i.schema_name, i.table_view, count(*) as index_count from( select t.schema_id, schema_name(t.schema_id) as schema_name, t.name as table_view, case when t.[type] = 'U' then 'Table' when t.[type] = 'V' then 'View' end as [object_type], i.index_id, case when i.is_primary_key = 1 then 'Primary key' when i.is_unique = 1 then 'Unique' else 'Not unique' end as [type], i.[name] as index_name, substring(column_names, 1, len(column_names)-1) as [columns], case when i.[type] = 1 then 'Clustered index' when i.[type] = 2 then 'Nonclustered unique index' when i.[type] = 3 then 'XML index' when i.[type] = 4 then 'Spatial index' when i.[type] = 5 then 'Clustered columnstore index' when i.[type] = 6 then 'Nonclustered columnstore index' when i.[type] = 7 then 'Nonclustered hash index' end as index_type from sys.objects t inner join sys.indexes i on t.object_id = i.object_id cross apply (select col.[name] + ', ' from sys.index_columns ic inner join sys.columns col on ic.object_id = col.object_id and ic.column_id = col.column_id where ic.object_id = t.object_id and ic.index_id = i.index_id order by col.column_id for xml path ('')) D (column_names) where t.is_ms_shipped <> 1 and index_id > 0 ) as i GROUP BY i.schema_id, i.schema_name, i.table_view having count(*) > 64

tc05_IsIdentifiersCreatedInMssqlIsLessThan64()
tc06_IsMaximumIdentifiersAreListedGreaterThan64()
identifiers = select s.name as schema_name, t.name as table_name, col.name as col_name from sys.schemas as s left join sys.tables as t on t.schema_id = s.schema_id left join sys.columns as col on t.object_id = col.object_id where len(s.name) > 64 or len(t.name) > 64 or len(col.name) > 64





tc07_DataBaseChecks()
dbUtilizedSize = SELECT sys.databases.name, CONVERT(VARCHAR,SUM(size)*8/1024)+' MB' AS [Total disk space] FROM sys.databases JOIN sys.master_files ON sys.databases.database_id=sys.master_files.database_id where sys.databases.name = 'hanan' GROUP BY sys.databases.name ORDER BY sys.databases.name
coreSchemaSize = select 'core schema', concat(cast(sum(spc.used_pages * 8)/1024.00 as numeric(36, 2)), ' MB') as space from sys.tables tab inner join sys.indexes ind on tab.object_id = ind.object_id inner join sys.partitions part on ind.object_id = part.object_id and ind.index_id = part.index_id inner join sys.allocation_units spc on part.partition_id = spc.container_id where schema_name(tab.schema_id) in ('ENGINE', 'LOOKUPS', 'DATACENTER')
NoncoreSchema = select 'noncore schema', concat(cast(sum(spc.used_pages * 8)/1024.00 as numeric(36, 2)), ' MB') as space from sys.tables tab inner join sys.indexes ind on tab.object_id = ind.object_id inner join sys.partitions part on ind.object_id = part.object_id and ind.index_id = part.index_id inner join sys.allocation_units spc on part.partition_id = spc.container_id where schema_name(tab.schema_id) not in ('dbo', 'db_owner', 'db_accessadmin', 'db_securityadmin', 'db_ddladmin', 'db_backupoperator', 'db_datareader', 'db_datawriter', 'db_denydatareader', 'db_denydatawriter', 'sys', 'INFORMATION_SCHEMA', 'guest', 'ENGINE', 'LOOKUPS', 'DATACENTER')
dbVersion = SELECT @@VERSION
engineVersion = select CAST(SERVERPROPERTY('productversion') as varchar) as data
privilegeValidation = SELECT IS_SRVROLEMEMBER('sysadmin', 'sushanth')


















